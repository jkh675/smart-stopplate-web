"use client"
// import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import Button from '@mui/material/Button';
import React from 'react';
import Box from '@mui/material/Box';
import ButtonGroup from '@mui/material/ButtonGroup';
import { AppBar, ButtonProps, CssBaseline, Drawer, IconButton, MenuItem, Paper, Slide, ThemeProvider, Toolbar, Typography, createTheme, useScrollTrigger, useTheme } from '@mui/material';
import { ThemeOptions } from '@mui/material/styles';
import { AccountCircle, ArrowBack, Menu } from '@mui/icons-material';
import { ROUTE_LIST, __DEV__ } from '../constant';
import Link from 'next/link';
import Stack from '@mui/material/Stack';
import { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, split, ApolloLink } from "@apollo/client";
import { ServerSentEventsLink } from '@graphql-sse/apollo-client';
import { GraphQLWsLink } from "@apollo/client/link/subscriptions";
import { createClient } from "graphql-ws";
import { loadErrorMessages, loadDevMessages } from "@apollo/client/dev";

import { BLEStopplateService } from "@/ble_service";
import { getMainDefinition } from '@apollo/client/utilities';


const inter = Inter({ subsets: ['latin'] })

// export const metadata: Metadata = {
// 	title: 'Create Next App',
// 	description: 'Generated by create next app',
// }


const MenuButton = (props: ButtonProps) => {
	return <Button style={{
			height: "3rem",
			justifyContent: "right",
			width: "100%",
		}} {...props} />
}
export const themeOptions: ThemeOptions = createTheme({
	palette: {
		mode: 'dark',
	},
	typography: {
		button: {
			textTransform: 'none'
		}
	}
});




/* #region create Websocket link for subscription */
const httpLink = new HttpLink({
	uri: process.env.backendUrl,
});

// const sseLink = new ServerSentEventsLink({
// 	graphQlSubscriptionUrl: process.env.backendUrl,
// });
const wsLink = new GraphQLWsLink(
	createClient({
		url: process.env.wsBackendUrl as string,
	})
);
const splitLink = split(
	({ query }) => {
		const definition = getMainDefinition(query);
		return (
			definition.kind === 'OperationDefinition' &&
			definition.operation === 'subscription'
		);
	},
	wsLink,
	httpLink
);
const client = new ApolloClient({
	cache: new InMemoryCache(),
	link: splitLink,
})

if (__DEV__) {  // Adds messages only in a dev environment
	loadDevMessages();
	loadErrorMessages();
}

/* #endregion */

interface Props {
	/**
	 * Injected by the documentation to work in an iframe.
	 * You won't need it on your project.
	 */
	children: React.ReactElement;
}
function HideOnScroll(props: Props) {
	const { children } = props;
	// Note that you normally won't need to set the window ref as useScrollTrigger
	// will default to window.
	// This is only being set here because the demo is in an iframe.
	const trigger = useScrollTrigger({
		target: window,
	});

	return (
		<Slide appear={false} direction="down" in={!trigger}>
			{children}
		</Slide>
	);
}

export default function RootLayout({
	children,
}: {
	children: React.ReactNode
}) {
	const theme = useTheme();

	const [open, setOpen] = React.useState(false);

	return (
		<html lang="en">
			<head>
				<meta httpEquiv="Content-Security-Policy" content="upgrade-insecure-requests" />
			</head>
			<body className={inter.className}>
				<ThemeProvider theme={themeOptions}>
					<CssBaseline />
					<ApolloProvider client={client}>
						<HideOnScroll>
							<AppBar position="static">
								<Toolbar>
									<IconButton
										size="large"
										edge="start"
										color="inherit"
										aria-label="menu"
										sx={{ mr: 2 }}
										onClick={() => setOpen(true)}
									>
										<Menu />
									</IconButton>
									<Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
										Smart IPSC Training System
									</Typography>
								</Toolbar>
							</AppBar>
						</HideOnScroll>
						<nav>
							<Drawer
								variant="temporary"
								open={open}
								onClose={() => setOpen(false)}
								ModalProps={{
									keepMounted: true, // Better open performance on mobile.
								}}
								sx={{
									display: { xs: 'block', sm: 'none' },
									'& .MuiDrawer-paper': { boxSizing: 'border-box', width: "40vw" },
								}}
							>
								<Paper elevation={10} style={{ height: "100vh" }}>
									<ButtonGroup orientation="vertical" style={{ margin: 10 }}>
										<MenuButton variant='contained' endIcon={open ? <ArrowBack /> : <Menu />} onClick={() => setOpen(!open)}>Collapse</MenuButton>
										{ROUTE_LIST.map((v, i) => v.show_on_sidebar ? <Link key={i} href={`${v.dir}`}><MenuButton variant='outlined' endIcon={<v.icon />}>
											{v.display_name}
										</MenuButton></Link> : null)}
									</ButtonGroup>
								</Paper>
							</Drawer>
						</nav>
						<Paper>
							<Stack direction={"row"}>
								{/* <SideDrawer /> */}
								<Box component="main" sx={{ flexGrow: 1, p: 3, overflow: "auto", height: "100vh", scrollBehavior: "auto" }}>
									{children}
								</Box>
							</Stack>
						</Paper>
					</ApolloProvider>
				</ThemeProvider>
			</body>
		</html>

	)
}
